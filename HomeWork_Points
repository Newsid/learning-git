
var random = Math.random;

/* POINT */

var Point = function (x, y) {
  this.x = x || 0;
  this.y = y || 0;
}

Point.prototype.getDistanceFromPoint = function(point) {
  return sqrt(pow(point.y - this.y, 2) + pow(point.x - this.y, 2));
};

Point.prototype.translate = function(dx, dy) {
  this.x += dx;
  this.y += dy;

  return this;
};

Point.prototype.getDistanceFromLine = function(line){
  var a = line.a;

  var b = line.b;

  var c = line.c;

  var num = abs(a * this.x + b * this.y + c);
  var den = sqrt(pow(a,2) + pow(b,2));

  return num/den;
};


Point.prototype.getDistance = function(x){

  if (x instanceof Point){
    return this.getDistanceFromPoint(x);
  }

  if (x instanceof Line){
    return this.getDistanceFromLine(x);
  }


  throw new Error("Wrong Parameter");
};

Point.prototype.membership = function(line) {
  var result = (line.a * this.x) + (line.b * this.y) + line.c;

if (result > 0){
  return 1;
}
if (result === 0){
  return 0;
}
if (result < 0){
  return -1;
}
};


var Line = function (a, b, c){

  this.a = a;
  this.b = b;
  this.c = c;

  return this;
}

/* TRIANGLE */

var Triangle = function (p1, p2, p3) {
  this.points = [p1, p2, p3];
  
  this.l1 = p2.getDistance(p3);
  this.l2 = p3.getDistance(p1);
  this.l3 = p1.getDistance(p2);
};

Triangle.prototype.getPerimeter = function() {
  return this.l1 + this.l2 + this.l3;
};

Triangle.prototype.getArea = function() {
  var p = this.getPerimeter() / 2;

  return sqrt(p*(p - this.l1)*(p - this.l2)*(p - this.l3));
};

Point.prototype.membership 

var randomPoint = function () {
  var x1 = random() * 200 - 100;
  var y1 = random() * 200 - 100;
  
  return new Point(x1, y1);
};

var randomPoints = function (n) {
  var n = n || 1;
  var res = new Array(n);

  for (var i = 0; i < n ; i += 1) {
    res[i] = randomPoint();
  }

  return res;
}



var points = randomPoints(100);



Triangle.prototype.above = function(line){

var check = this.p1.membership(line) + this.p2.membership(line) + this.p3.membership(line);

if (check === 3)
  return true;
else
  return false;

}


Triangle.prototype.below = function(line){

var check = this.points[0].membership(line) + this.points[1].membership(line) + this.points[2].membership(line);

if (check === -3)
  return true;
else
  return false;

}

Triangle.prototype.intersect = function(line){

var check = this.p1.membership(line) + this.p2.membership(line) + this.p3.membership(line);

if (check > -3 && check < 3)
  return true;
else
  return false;

}





